import { useEffect, useState } from "react";
import axios from "axios";
import { Button, Input, List } from "antd";
import Image from "next/image";
import { SearchOutlined } from "@ant-design/icons";

export default function YoutubeInfluencers() {
  const [searchQuery, setSearchQuery] = useState("");
  const [influencerData, setInfluencerData] = useState([]);
  const [searchField, setSearchField] = useState("");
  const YOUTUBE_API_KEY = process.env.NEXT_PUBLIC_YOUTUBE_API_KEY;

  const fetchChannels = async (query) => {
    try {
      const searchResponse = await axios.get(
        `https://www.googleapis.com/youtube/v3/search?key=${YOUTUBE_API_KEY}&q=${query}&type=channel&part=snippet&maxResults=10`
      );

      const channelIds = searchResponse.data.items
        ?.map((item) => item.id.channelId)
        .join(",");

      const channelResponse = await axios.get(
        `https://www.googleapis.com/youtube/v3/channels?key=${YOUTUBE_API_KEY}&id=${channelIds}&part=snippet,statistics`
      );

      if (channelResponse.data.items) {
        setInfluencerData(channelResponse.data.items);
      } else {
        console.error("Error fetching data from YouTube API: No items found");
      }
    } catch (error) {
      console.error("Error fetching data from YouTube API:", error);
    }
  };

  useEffect(() => {
    if (searchQuery) {
      fetchChannels(searchQuery);
    }
  }, [searchQuery]);

  const handleSearch = (value) => {
    setSearchQuery(value);
  };

  return (
    <div>
      <div
        style={{
          display: "flex",
          justifyContent: "center",
          marginBottom: "1rem",
        }}
      >
        <Input
          suffix={
            <SearchOutlined style={{ fontSize: "1.7em", color: "#ccc" }} />
          }
          placeholder="Search YouTube Channels by topic"
          style={{
            width: "50%",
            marginBottom: "1rem",
            border: "1px solid #ccc",
            padding: "0.6em 0.9em 0.6em 2em",
            borderRadius: "2em",
            fontSize: "1.2em",
            fontWeight: 600,
          }}
          // onSearch={handleSearch}
          onChange={(e) => setSearchField(e.target.value)}
          // submit on enter
          onPressEnter={() => handleSearch(searchField)}
        />
      </div>
      {influencerData.length > 0 ? (
        <List
          itemLayout="horizontal"
          dataSource={influencerData}
          renderItem={(channel) => (
            <List.Item
              style={{
                display: "grid",
                gridTemplateColumns: "4fr 1fr 1fr",
                alignItems: "center",
              }}
            >
              <List.Item.Meta
                title={channel.snippet.title}
                description={
                  channel.snippet.description.length > 100
                    ? channel.snippet.description.slice(0, 100) + "..."
                    : channel.snippet.description
                }
                avatar={
                  <Image
                    src={channel.snippet.thumbnails.default.url}
                    alt={channel.snippet.title}
                    width={100}
                    height={100}
                    style={{
                      objectFit: "cover",
                      borderRadius: "50%",
                    }}
                  />
                }
              />
              <p
                style={{
                  fontSize: "1.2em",
                  fontWeight: 600,
                }}
              >
                {/* Subscribers: {channel.statistics.subscriberCount} */}
                {/* Numbers in K(Thousands), M(Millions) */}
                Subscribers:{" "}
                {channel.statistics.subscriberCount > 999999
                  ? (channel.statistics.subscriberCount / 1000000).toFixed(1) +
                    "M"
                  : channel.statistics.subscriberCount > 999
                  ? (channel.statistics.subscriberCount / 1000).toFixed(1) + "K"
                  : channel.statistics.subscriberCount}
              </p>
              <p
                style={{
                  fontSize: "1.2em",
                  fontWeight: 600,
                }}
              >
                {/* Views: {channel.statistics.viewCount} */}
                {/* Numbers in K(Thousands), M(Millions), B(Billions) */}
                Views:{" "}
                {channel.statistics.viewCount > 999999999
                  ? (channel.statistics.viewCount / 1000000000).toFixed(1) + "B"
                  : channel.statistics.viewCount > 999999
                  ? (channel.statistics.viewCount / 1000000).toFixed(1) + "M"
                  : channel.statistics.viewCount > 999
                  ? (channel.statistics.viewCount / 1000).toFixed(1) + "K"
                  : channel.statistics.viewCount}
              </p>
              {/* <Button
                  type="primary"
                  onClick={() =>
                    (window.location.href = `mailto:?subject=Contact YouTube Channel ${channel.snippet.title}&body=I would like to contact you regarding your YouTube channel.`)
                  }
                >
                  Contact
                </Button> */}
            </List.Item>
          )}
        />
      ) : (
        <p>No data available. Please search for a topic.</p>
      )}
    </div>
  );
}
